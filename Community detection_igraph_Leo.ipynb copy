{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# pip install python-igraph\n",
    "# pip install pycairo\n",
    "# pip install cairocffi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import networkx as nx\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.pyplot import cm\n",
    "from operator import itemgetter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "os.getcwd()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2009"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "df2009 = pd.read_excel('European_electricity_network_vFinal.xlsx', sheet_name='2009')\n",
    "df2009.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "df_elec2009 = df2009.drop(['Origin_Country'], axis=1)\n",
    "df_elec2009.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Sort and clean up data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert the wide table to long table\n",
    "Country_list = list(df_elec2009.columns)\n",
    "df_elec2009 = df_elec2009.melt(id_vars=['Country_Code'], value_vars=(Country_list[1:]), var_name='Destination', value_name='Electricity_Flow')\n",
    "df_elec2009.rename(columns={'Country_Code':'Origin'}, inplace=True)\n",
    "df_elec2009.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Sort the table based on origin country's name\n",
    "df_elec2009.sort_values('Origin', inplace=True, ascending=True)\n",
    "df_elec2009.reset_index(drop=True, inplace=True)\n",
    "\n",
    "# Delete NAs (when Origin=Destination)\n",
    "df_elec2009.dropna(axis=0, inplace=True) \n",
    "\n",
    "# Delete zero-value rows\n",
    "df_elec2009 = df_elec2009[df_elec2009.Electricity_Flow != 0]\n",
    "df_elec2009.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create the network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "G2009 = nx.from_pandas_edgelist(df_elec2009, \n",
    "                                'Origin', \n",
    "                                'Destination', \n",
    "                                create_using = nx.DiGraph)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import igraph as ig\n",
    "import pylab as plt\n",
    "\n",
    "g_2009 = ig.Graph.from_networkx(G2009)\n",
    "layout1 = g_2009.layout_kamada_kawai()\n",
    "ig.plot(g_2009, \n",
    "        layout = layout1,\n",
    "        vertex_label = G2009.nodes(), \n",
    "        #vertex_size = vertex_sizes,\n",
    "        vertex_color = 'lightblue', \n",
    "        vertex_label_dist = 0,\n",
    "        vertex_frame_width = 0.1,\n",
    "        vertex_label_size = 9,\n",
    "        edge_arrow_size = 0.5,\n",
    "        edge_curved = False,\n",
    "        directed=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "community2009 = g_2009.community_infomap()\n",
    "ig.plot(community2009, \n",
    "        vertex_label = G2009.nodes(),\n",
    "        vertex_label_size = 9,\n",
    "        vertex_label_color = 'black',\n",
    "       )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2014"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "df2014 = pd.read_excel('European_electricity_network_vFinal.xlsx', sheet_name='2014')\n",
    "df2014.head()\n",
    "df_elec2014 = df2014.drop(['Origin_Country'], axis=1)\n",
    "df_elec2014.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert the wide table to long table\n",
    "Country_list = list(df_elec2014.columns)\n",
    "df_elec2014 = df_elec2014.melt(id_vars=['Country_Code'], value_vars=(Country_list[1:]), var_name='Destination', value_name='Electricity_Flow')\n",
    "df_elec2014.rename(columns={'Country_Code':'Origin'}, inplace=True)\n",
    "df_elec2014.head()\n",
    "# Sort the table based on origin country's name\n",
    "df_elec2014.sort_values('Origin', inplace=True, ascending=True)\n",
    "df_elec2014.reset_index(drop=True, inplace=True)\n",
    "\n",
    "# Delete NAs (when Origin=Destination)\n",
    "df_elec2014.dropna(axis=0, inplace=True) \n",
    "\n",
    "# Delete zero-value rows\n",
    "df_elec2014 = df_elec2014[df_elec2014.Electricity_Flow != 0]\n",
    "df_elec2014.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "G2014 = nx.from_pandas_edgelist(df_elec2014, \n",
    "                                'Origin', \n",
    "                                'Destination', \n",
    "                                create_using = nx.DiGraph)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import igraph as ig\n",
    "import pylab as plt\n",
    "\n",
    "g_2014 = ig.Graph.from_networkx(G2014)\n",
    "layout1 = g_2014.layout_kamada_kawai()\n",
    "ig.plot(g_2014, \n",
    "        layout = layout1,\n",
    "        vertex_label = G2014.nodes(), \n",
    "        vertex_color = 'lightblue', \n",
    "        vertex_label_dist = 0,\n",
    "        vertex_frame_width = 0.1,\n",
    "        vertex_label_size = 9,\n",
    "        edge_arrow_size = 0.5,\n",
    "        edge_curved = False,\n",
    "        directed=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "community2014 = g_2014.community_infomap()\n",
    "ig.plot(community2014, \n",
    "        vertex_label = G2014.nodes(),\n",
    "        vertex_label_size = 9,\n",
    "        vertex_color = 'grey',\n",
    "        mark_groups = True\n",
    "       )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2018"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "df2018 = pd.read_excel('European_electricity_network_vFinal.xlsx', sheet_name='2018')\n",
    "df2018.head()\n",
    "df_elec2018 = df2018.drop(['Origin_Country'], axis=1)\n",
    "df_elec2018.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert the wide table to long table\n",
    "Country_list = list(df_elec2018.columns)\n",
    "df_elec2018 = df_elec2018.melt(id_vars=['Country_Code'], value_vars=(Country_list[1:]), var_name='Destination', value_name='Electricity_Flow')\n",
    "df_elec2018.rename(columns={'Country_Code':'Origin'}, inplace=True)\n",
    "df_elec2018.head()\n",
    "# Sort the table based on origin country's name\n",
    "df_elec2018.sort_values('Origin', inplace=True, ascending=True)\n",
    "df_elec2018.reset_index(drop=True, inplace=True)\n",
    "\n",
    "# Delete NAs (when Origin=Destination)\n",
    "df_elec2018.dropna(axis=0, inplace=True) \n",
    "\n",
    "# Delete zero-value rows\n",
    "df_elec2018 = df_elec2018[df_elec2018.Electricity_Flow != 0]\n",
    "df_elec2018.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "G2018 = nx.from_pandas_edgelist(df_elec2018, \n",
    "                                'Origin', \n",
    "                                'Destination', \n",
    "                                create_using = nx.DiGraph)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import igraph as ig\n",
    "import pylab as plt\n",
    "\n",
    "g_2018 = ig.Graph.from_networkx(G2018)\n",
    "layout1 = g_2018.layout_kamada_kawai()\n",
    "ig.plot(g_2018, \n",
    "        layout = layout1,\n",
    "        vertex_label = G2018.nodes(), \n",
    "        #vertex_size = vertex_sizes,\n",
    "        vertex_color = 'lightblue', \n",
    "        vertex_label_dist = 0,\n",
    "        vertex_frame_width = 0.1,\n",
    "        vertex_label_size = 9,\n",
    "        edge_arrow_size = 0.5,\n",
    "        edge_curved = False,\n",
    "        directed=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "community2018 = g_2018.community_infomap()\n",
    "ig.plot(community2018, \n",
    "        vertex_label = G2018.nodes(),\n",
    "        vertex_label_size = 9,\n",
    "        vertex_color = 'grey',\n",
    "        mark_groups = True\n",
    "       )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##Girvan-Newman algorithm\n",
    "from networkx.algorithms.community.centrality import girvan_newman\n",
    "communities = girvan_newman(G2018)\n",
    "\n",
    "node_groups = []\n",
    "for com in next(communities):\n",
    "    node_groups.append(list(com))\n",
    "\n",
    "print(node_groups)\n",
    "color_map = []\n",
    "for node in G2018:\n",
    "    if node in node_groups[0]:\n",
    "        color_map.append('lightblue')\n",
    "    elif node in node_groups[1]:\n",
    "        color_map.append('lightgreen')\n",
    "    elif node in node_groups[2]:\n",
    "        color_map.append('yellow')\n",
    "    elif node in node_groups[3]:\n",
    "        color_map.append('lightpink')\n",
    "plt.figure(figsize=(8,6))\n",
    "nx.draw(G2018, node_color=color_map, edge_color='gray', style = \"solid\", width=1, with_labels=True)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
